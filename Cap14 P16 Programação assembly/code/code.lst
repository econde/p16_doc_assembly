P16 assembler v1.3.99 (Mar  9 2021)	code.lst	Wed May 12 16:56:53 2021

Sections
Index   Name            Addresses       Size
0       .text           0000 - 0113     0114 276

Symbols
Name                    Type      Value      Section
addr_x                  LABEL     00C4 196   .text
delay                   LABEL     00E6 230   .text
do_while                LABEL     0078 120   .text
for                     LABEL     009A 154   .text
for1                    LABEL     00CA 202   .text
for2                    LABEL     00D8 216   .text
for3                    LABEL     00EA 234   .text
for_cond                LABEL     009E 158   .text
for_cond1               LABEL     00CE 206   .text
for_cond2               LABEL     00DE 222   .text
for_end3                LABEL     00F2 242   .text
if_else                 LABEL     005C 92    .text
if_end                  LABEL     0060 96    .text
if_end1                 LABEL     00B0 176   .text
if_end2                 LABEL     00B6 182   .text
label1                  LABEL     0050 80    .text
multiply                LABEL     0104 260   .text
switch_break            LABEL     0078 120   .text
switch_case1            LABEL     0062 98    .text
switch_case10           LABEL     006C 108   .text
switch_default          LABEL     0076 118   .text
while                   LABEL     0106 262   .text
while1                  LABEL     0080 128   .text
while2                  LABEL     008A 138   .text
while_cond2             LABEL     0090 144   .text
while_do2               LABEL     008C 140   .text
while_end               LABEL     0110 272   .text
while_end1              LABEL     008A 138   .text
x                       LABEL     00B6 182   .text
y                       LABEL     00B7 183   .text

Code listing
   1           		.text
   2 0000 80 80	add	r0, r0, r1
   3           	
   4 0002 A0 80	add	r0, r2, r1
   5 0004 80 89	sub	r0, r0, r3
   6           	
   7 0006 90 A9	sub	r0, r1, 3
   8           	
   9           	
  10 0008 24 80	add	r4, r2, r0
  11 000A B5 90	adc	r5, r3, r1
  12           	
  13           	; r0 - a
  14 000C 50 6E	mov	r0, 3045 & 0xff
  15 000E B0 70	movt	r0, 3045 >> 8
  16           	
  17           	
  18 0010 91 E8	lsr	r1, r1, 1
  19 0012 00 D8	rrx	r0, r0
  20           	
  21 0014 00 EA	lsr	r0, r0, 4
  22 0016 12 E6	lsl	r2, r1, 16 - 4
  23 0018 00 81	add	r0, r0, r2
  24 001A 11 EA	lsr	r1, r1, 4
  25           	
  26           	
  27 001C 80 E0	lsl	r0, r0, 1
  28 001E 91 90	adc	r1, r1, r1
  29           	
  30 0020 11 E2	lsl	r1, r1, 4
  31 0022 02 EE	lsr	r2, r0, 16 - 4
  32 0024 11 81	add	r1, r1, r2
  33 0026 00 E2	lsl	r0, r0, 4
  34           	
  35 0028 80 F9	ror	r0, r0, 3
  36           	
  37 002A 80 FD	ror	r0, r0, 16 - 5
  38           	
  39 002C F1 6F		mov	r1, 0b11111111
  40 002E F1 7E		movt	r1, 0b11101111
  41 0030 80 C0		and	r0, r0, r1
  42           		
  43 0032 92 EC		lsr	r2, r1, 13 - 4
  44 0034 03 61		mov	r3, 0b00010000
  45 0036 A2 C1		and	r2, r2, r3
  46 0038 80 C9		orr	r0, r0, r3
  47 003A 00 C9		orr	r0, r0, r2
  48           		
  49           		;ro – a, r1 - b
  50 003C 01 B0	mov	r1, r0	; * 1
  51 003E 80 E0	lsl	r0, r0, 1
  52 0040 11 80	add	r1, r1, r0	; * 2
  53 0042 80 E0	lsl	r0, r0, 1
  54 0044 11 80	add	r1, r1, r0	; * 4
  55 0046 00 E1	lsl	r0, r0, 2
  56 0048 11 80	add	r1, r1, r0	; * 16
  57           	
  58           	;r5 – i, f – r2, g - r4
  59 004A 55 A0		add	r5, r5, 0
  60 004C 01 40		beq	label1
  61 004E A2 A1		add	r2, r2, 3
  62           	label1:
  63 0050 C4 A8		sub	r4, r4, 1
  64           	
  65           	
  66           	;r5 – i, r3 – j, r2 - f
  67 0052 D0 B9		cmp	r5, r3
  68 0054 03 44		bne	if_else
  69 0056 A2 E0		lsl	r2, r2, 1
  70 0058 D5 A0		add	r5, r5, 1
  71 005A 02 58		b	if_end
  72           	if_else:
  73 005C 22 E9		lsr	r2, r2, 2
  74 005E 55 A9		sub	r5, r5, 2
  75           	if_end:
  76 0060 B3 A0		add	r3, r3, 1
  77           	
  78           	;r0 = v, r1 – a
  79           	switch_case1:
  80 0062 12 60	    mov   r2, 1
  81 0064 00 B9	    cmp   r0, r2
  82 0066 02 44	    bne   switch_case10
  83 0068 B1 60	    mov   r1, 11
  84 006A 06 58	    b     switch_break;
  85           	switch_case10:
  86 006C A2 60	    mov   r2, 10
  87 006E 00 B9	    cmp   r0, r2
  88 0070 02 44	    bne   switch_default
  89 0072 F1 66	    mov   r1, 111
  90 0074 01 58	    b     switch_break;
  91           	switch_default:
  92 0076 01 60	    mov   r1, 0
  93           	switch_break:
  94           	
  95           	;r0 – v, r1 – l
  96           	do_while:
  97 0078 80 E8	    lsr    r0, r0, 1
  98 007A 91 A0	    add    r1, r1, 1
  99 007C 00 A8	    sub    r0, r0, 0
 100 007E FC 47	    bne    do_while
 101           	 
 102           	 
 103           	;r0 – v, r1 – l
 104           	while1:
 105 0080 00 A8	    sub    r0, r0, 0
 106 0082 03 40	    beq    while_end1
 107 0084 80 E8	    lsr    r0, r0, 1
 108 0086 91 A0	    add    r1, r1, 1
 109 0088 FB 5B	    b      while1
 110           	while_end1:
 111           	
 112           	;r0 – v, r1 – l
 113           	while2:
 114 008A 02 58	    b      while_cond2
 115           	while_do2:
 116 008C 80 E8	    lsr    r0, r0, 1
 117 008E 91 A0	    add    r1, r1, 1
 118           	while_cond2:
 119 0090 00 A8	    sub    r0, r0, 0
 120 0092 FC 47	    bne    while_do2
 121           	    
 122           	;r0 – i, r1 – a, r2 - n
 123 0094 00 60	    mov    r0, 0
 124 0096 11 60	    mov    r1, 1
 125 0098 02 58	    b      for_cond
 126           	for:
 127 009A 91 E0	    lsl    r1, r1, 1
 128 009C 80 A0	    add    r0, r0, 1
 129           	for_cond:
 130 009E 00 B9	    cmp    r0, r2
 131 00A0 FC 4B	    blo    for
 132           	
 133 00A2 80 F9		ror	r0, r0, 3
 134 00A4 D5 4B		bcs	label1
 135           	
 136 00A6 55 A0		add	r5, r5, 0
 137 00A8 D3 43		beq	label1
 138           	
 139           	;r0 – a, r1 – b, r2 - c
 140 00AA 80 B8		cmp	r0, r1
 141 00AC 01 4C		bhs	if_end1
 142 00AE 02 B0		mov	r2, r0
 143           	if_end1:
 144           	
 145           	;r0 – a, r1 - b
 146 00B0 10 B8		cmp	r1, r0
 147 00B2 01 4C		bhs	if_end2
 148 00B4 02 B0		mov	r2, r0
 149           	if_end2:
 150           	
 151 00B6 00	x:	.byte	0
 152 00B7 00	y:	.byte	0
 153           	
 154 00B8 61 6B	mov  r1, x
 155 00BA 10 08	ldrb r0, [r1]
 156           	
 157 00BC 71 6B	mov  r1, y
 158 00BE 10 00	ldr  r0, [r1]
 159           	
 160 00C0 11 0C	ldr  r1, addr_x
 161 00C2 10 08	ldrb r0, [r1]
 162           	
 163 00C4 B6 00	addr_x:	.word x
 164           	
 165           	; r0 – array, r1 – i, r2 - a
 166 00C6 01 60	    mov   r1, 0
 167 00C8 02 58	    b     for_cond1
 168           	for1:
 169 00CA 83 18	    ldrb  r3, [r0, r1]
 170 00CC A2 81	    add   r2, r2, r3
 171           	for_cond1:
 172 00CE A3 60	    mov   r3, 10
 173 00D0 90 B9	    cmp   r1, r3
 174 00D2 FB 4B	    blo   for1
 175           	   
 176           	
 177           	; r0 – array, r1 – i
 178           	; r2 - a
 179           	
 180 00D4 01 60	    mov   r1, 0
 181 00D6 03 58	    b     for_cond2
 182           	for2:
 183 00D8 93 E0	    lsl   r3, r1, 1
 184 00DA 83 11	    ldr   r3, [r0, r3]
 185 00DC A2 81	    add   r2, r2, r3
 186           	for_cond2:
 187 00DE A3 60	    mov   r3, 10
 188 00E0 90 B9	    cmp   r1, r3
 189 00E2 FA 4B	    blo   for2
 190           	
 191 00E4 00 5C	  bl     delay
 192           	  
 193           	  
 194           	delay:
 195 00E6 40 66	    mov    r0, 100
 196 00E8 01 60	    mov    r1, 0   
 197           	for3:
 198 00EA 10 B8	    cmp    r1, r0
 199 00EC 02 4C	    bcc    for_end3
 200 00EE 91 A0	    add    r1, r1, 1
 201 00F0 FC 5B	    b      for3
 202           	for_end3:
 203 00F2 0F B7	    mov    pc, lr
 204           	
 205           	
 206 00F4 40 60	mov    r0, 4
 207 00F6 A1 60	mov    r1, 10
 208 00F8 05 5C	bl     multiply
 209 00FA 40 21	str    r0, [r4, 4]
 210 00FC 80 60	mov    r0, 8
 211 00FE A1 60	mov    r1, 10
 212 0100 01 5C	bl     multiply
 213 0102 C0 21	str    r0, [r4, 6]
 214           	
 215           	multiply:
 216 0104 02 60		mov	r2, 0
 217           	while:
 218 0106 11 A8		sub	r1, r1, 0
 219 0108 03 40		beq	while_end
 220 010A 22 80		add	r2, r2, r0
 221 010C 91 A8		sub	r1, r1, 1
 222 010E FB 5B		b	while
 223           	while_end:
 224 0110 00 B1		mov	r0, r2
 225 0112 0F B7		mov	pc, lr
 226           	
 227           	
 228           	
 229           	
