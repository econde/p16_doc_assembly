P16 assembler v1.2 (Apr  8 2019)	multiply.lst	Mon Apr  8 10:56:50 2019

Sections
Index   Name            Addresses       Size
0       .startup        0000 - 0009     000A 10
1       .stack          000A - 0089     0080 128
2       .data           008A - 008F     0006 6
3       .text           0090 - 00C7     0038 56

Symbols
Name                    Type      Value      Section
mul_if_end              LABEL     00C0 192   .text
mul_return              LABEL     00C4 196   .text
addr_n                  LABEL     00AE 174   .text
main                    LABEL     0090 144   .text
stack_top               LABEL     008A 138   .stack
line#7                  LABEL     0008 8     .startup
p                       LABEL     008C 140   .data
line#3                  LABEL     0002 2     .startup
addr_q                  LABEL     00B2 178   .text
_start                  LABEL     0004 4     .startup
mul_while               LABEL     00B6 182   .text
addr_p                  LABEL     00B0 176   .text
m                       LABEL     008A 138   .data
q                       LABEL     008E 142   .data
n                       LABEL     008B 139   .data
multiply                LABEL     00B4 180   .text
addr_m                  LABEL     00AC 172   .text

Code listing
   1              		.section .startup
   2 0000 0158    		b	_start
   3 0002 FF5B    		b	.	/*reservado para as insterrupções */
   4              	_start:
   5 0004 AD68    		mov	sp, stack_top
   6 0006 445C    		bl	main
   7 0008 FF5B    		b	.
   8              	
   9              	
  10              		.section .stack
  11 000A 00000000		.space	128
  11 000E 00000000
  11 0012 00000000
  11 0016 00000000
  12              	stack_top:
  13              	
  14              	/*------------------------------------------------------
  15              	uint8_t m = 20, n = 3;
  16              	
  17              	uint16_t p, q;
  18              	*/
  19              	
  20              		.data
  21              	m:
  22 008A 14      		.byte	20
  23              	n:
  24 008B 03      		.byte	3
  25              	p:
  26 008C 0000    		.word	0
  27              	q:
  28 008E 0000    		.word	0
  29              	
  30              	/*------------------------------------------------------
  31              	int main() {
  32              		p = multiply(m, n);
  33              		q = multiply(4, 7);
  34              	}
  35              	*/	
  36              		.text
  37              	main:
  38 0090 0E24    		push	lr
  39 0092 C00C    		ldr	r0, addr_m
  40 0094 0000    		ldr	r0, [r0]
  41 0096 B10C    		ldr	r1, addr_n
  42 0098 1100    		ldr	r1, [r1]
  43 009A 0C5C    		bl	multiply
  44 009C 910C    		ldr	r1, addr_p	
  45 009E 1020    		str	r0, [r1]
  46 00A0 4060    		mov	r0, 4
  47 00A2 7160    		mov	r1, 7
  48 00A4 075C    		bl	multiply
  49 00A6 510C    		ldr	r1, addr_q	
  50 00A8 1020    		str	r0, [r1]
  51 00AA 0F04    		pop	pc
  52              	
  53              	addr_m:
  54 00AC 8A00    		.word	m
  55              	addr_n:
  56 00AE 8B00    		.word	n
  57              	addr_p:
  58 00B0 8C00    		.word	p
  59              	addr_q:
  60 00B2 8E00    		.word	q
  61              	/*-----------------------------------------------------------
  62              	int multiply(<r0> int multiplicand, <r1> int multiplier)) {
  63              		<r2> int product = 0;
  64              		while ( multiplier > 0 ) {
  65              			if ( (multiplier & 1) != 0 )
  66              				product += multiplicand;
  67              			multiplier >>= 1;
  68              			multiplicand <<= 1;
  69              		}
  70              		<r0> return product;
  71              	}
  72              	*/
  73              	multiply:
  74 00B4 0260    		mov	r2, 0		; <r2> int product = 0;
  75              	mul_while:
  76 00B6 11A0    		add	r1, r1, 0	; while ( multiplier > 0 )
  77 00B8 0540    		beq	mul_return
  78 00BA 91E8    		lsr	r1, r1, 1	; if ( (multiplier & 1) != 0 )
  79 00BC 014C    		bcc	mul_if_end
  80 00BE 2280    		add	r2, r2, r0	; product += multiplicand;
  81              	mul_if_end:
  82 00C0 80E0    		lsl	r0, r0, 1	; multiplicand <<= 1;
  83 00C2 F95B    		b	mul_while
  84              	mul_return:
  85 00C4 00B1    		mov	r0, r2
  86 00C6 0FB7    		mov	pc, lr		; <r0> return product;
