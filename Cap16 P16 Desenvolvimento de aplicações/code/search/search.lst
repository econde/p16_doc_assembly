PDS16 assembler v0.0(Jan 29 2019)	search.lst	Mon Feb  4 17:35:27 2019


Sections
Index   Name            Addresses       Size
0       .startup        0000 - 0013     0014 20
1       .stack          0014 - 0413     0400 1024
2       .data           0414 - 0429     0016 22
3       .text           042a - 0471     0048 72

Symbols
Name                    Type      Value      Section
search_if_end           LABEL     046a 1130  .text
search_for_end          LABEL     0462 1122  .text
addr_q                  LABEL     044e 1102  .text
addr_table2             LABEL     044a 1098  .text
addr_p                  LABEL     044c 1100  .text
table2                  LABEL     0420 1056  .data
search_for              LABEL     0454 1108  .text
table2_end              LABEL     0426 1062  .data
_start                  LABEL     0004 4     .startup
stack_top               LABEL     0414 1044  .stack
main                    LABEL     042a 1066  .text
table1_end              LABEL     0420 1056  .data
line#10                 LABEL     000e 14    .startup
addr_table1             LABEL     0448 1096  .text
search                  LABEL     0450 1104  .text
addr_main               LABEL     0012 18    .startup
addr_stack_top          LABEL     0010 16    .startup
line#3                  LABEL     0002 2     .startup
table1                  LABEL     0414 1044  .data
p                       LABEL     0426 1062  .data
search_end              LABEL     046e 1134  .text
TABLE1_SIZE             ABSOLUTE  0006 6     .startup
q                       LABEL     0428 1064  .data

Code listing
   1              		.section .startup
   2 0000 0158    		b	_start
   3 0002 ff5b    		b	.
   4              	_start:
   5 0004 5d0c    		ldr	sp, addr_stack_top
   6 0006 500c    		ldr	r0, addr_main
   7 0008 81b7    		mov	r1, pc
   8 000a 1ea2    		add	lr, r1, 4
   9 000c 0fb0    		mov	pc, r0
  10 000e ff5b    		b	.
  11              		
  12              	addr_stack_top:
  13 0010 1404    		.word	stack_top
  14              	addr_main:
  15 0012 2a04    		.word	main
  16              	
  17              		.section	.stack
  18 0014 00000000		.space	1024
  18 0018 00000000
  18 001c 00000000
  18 0020 00000000
  19              	stack_top:
  20              	
  21              	/*----------------------------------------------------------------
  22              		#define ARRAY_SIZE(a)	(sizeof(a) / sizeof(a[0]))
  23              		uint16 table1[] = {10, 20, 5, 6, 34, 9};
  24              		uint16 table2[] = {11, 22, 33};
  25              		int16 p, q;
  26              	
  27              		int main() {
  28              			p = search(table1, ARRAY_SIZE(table1), 20);
  29              			q = search(table2, ARRAY_SIZE(table2), 31);
  30              		}
  31              	*/
  32              		.data
  33              		.equ	TABLE1_SIZE, (table1_end - table1) / 2
  34              	table1:
  35 0414 0a001400		.word	10, 20, 5, 6, 34, 9
  35 0418 05000600
  35 041c 22000900
  36              	table1_end:
  37              	table2:
  38 0420 0b001600		.word	11, 22, 33
  38 0424 2100
  39              	table2_end:
  40              	
  41              	p:
  42 0426 0000    		.word	0
  43              	q:
  44 0428 0000    		.word	0
  45              	
  46              		.text
  47              	main:
  48 042a 0e24    		push	lr 
  49 042c d00c    		ldr	r0, addr_table1
  50 042e 6160    		mov	r1, TABLE1_SIZE
  51 0430 4261    		mov	r2, 20
  52 0432 0e5c    		bl	search
  53 0434 b10c    		ldr	r1, addr_p
  54 0436 1020    		str	r0, [r1]
  55              		
  56 0438 800c    		ldr	r0, addr_table2
  57 043a 3160    		mov	r1, (table2_end - table2) / 2
  58 043c c262    		mov	r2, 44
  59 043e 085c    		bl	search
  60 0440 610c    		ldr	r1, addr_q
  61 0442 1020    		str	r0, [r1]
  62 0444 0060    		mov	r0, 0
  63 0446 0f04    		pop	pc
  64              	
  65              	addr_table1:
  66 0448 1404    		.word	table1
  67              	addr_table2:
  68 044a 2004    		.word	table2
  69              	addr_p:
  70 044c 2604    		.word	p
  71              	addr_q:
  72 044e 2804    		.word	q
  73              	
  74              	/*---------------------------------------------------------
  75              	<r0> int16 search(<r0> uint16 array[], <r1> uint8 array_size,
  76              			 <r2> uint16 value) {
  77              		for (<r3> uint8 i = 0; i < array_size && array[i] != value; ++i)
  78              			;
  79              		if( i < array_size)
  80              			return i;
  81              		return -1;
  82              	}
  83              	*/
  84              		.text
  85              	search:
  86 0450 0424    		push	r4
  87 0452 0360    		mov	r3, 0		/* r3 - i */
  88              	search_for:
  89 0454 b0b8    		cmp	r3, r1		/* i - array_size */
  90 0456 054c    		bhs	search_for_end
  91 0458 8411    		ldr	r4, [r0, r3]	/* array[i] != value */
  92 045a 40b9    		cmp	r4, r2
  93 045c 0240    		beq	search_for_end
  94 045e 33a1    		add	r3, r3, 2 	/* ++i */
  95 0460 f95b    		b	search_for
  96              	search_for_end:
  97 0462 b0b8    		cmp	r3, r1		/* if (i < array_size) */
  98 0464 024c    		bhs	search_if_end
  99 0466 b0e8    		lsr	r0, r3, 1	/* return i */
 100 0468 0258    		b	search_end
 101              	search_if_end:
 102 046a 0060    		mov	r0, 0		/* return -1 */
 103 046c 80a8    		sub	r0, r0, 1
 104              	search_end:
 105 046e 0404    		pop	r4
 106 0470 0fb7    		mov	pc, lr
